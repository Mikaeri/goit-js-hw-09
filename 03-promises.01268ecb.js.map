{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAeF,SAASC,cAAc,kBACtCE,EAAcH,SAASC,cAAc,iBACrCG,EAAgBJ,SAASC,cAAc,mBA6B7C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAGtBG,EAAO,C,SAAEJ,E,MAAUC,GAAM,GACxBA,EAAA,GAEP,CAvCAR,EAAKgB,iBAAiB,UAEtB,SAAwBC,GACtBA,EAAMC,iBACR,IAAIV,EAAQW,OAAOhB,EAAaiB,OAC5BC,EAAOF,OAAOf,EAAYgB,OAC1BE,EAASH,OAAOd,EAAce,OAC9Bb,EAAW,EAEb,GAAc,KAAVC,GAAyB,KAATa,GAA0B,KAAXC,EACjC,OAAOxB,EAAAyB,OAAOC,KAAK,kCAGrB,IAAK,IAAIC,EAAE,EAAGA,GAAGH,EAAQG,GAAG,EAC1BlB,EAAWkB,EACXnB,EAAcC,EAAUC,GACzBkB,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBV,EAAAyB,OAAOI,QAAQ,uBAAuBpB,QAAeC,MAAS,IAE/DoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBV,EAAAyB,OAAOM,QAAQ,sBAAsBtB,QAAeC,MAAS,IAE/DA,GAAOa,EAEPJ,EAAMa,cAAcC,OACtB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst inputElDelay = document.querySelector('[name=\"delay\"]');\nconst inputElStep = document.querySelector('[name=\"step\"]');\nconst inputElAmount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener(\"submit\", onHandleSubmit);\n\nfunction onHandleSubmit(event) {\n  event.preventDefault();\nlet delay = Number(inputElDelay.value);\nlet step = Number(inputElStep.value);\nlet amount = Number(inputElAmount.value);\nlet position = 0;\n\n  if (delay === \"\" || step === \"\" || amount === \"\") {\n    return Notify.info(\"Please fill in all the fields!\");\n  }\n\n  for (let i=1; i<=amount; i+=1){\n    position = i;\n    createPromise(position, delay)\n  .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  delay+=step;\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$inputElDelay","$47d4ff9957288465$var$inputElStep","$47d4ff9957288465$var$inputElAmount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","Number","value","step","amount","Notify","info","i","then","success","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.01268ecb.js.map"}